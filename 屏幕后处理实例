PostEffectsBase类

using UnityEngine;
using System.Collections;

//在编辑器状态下执行该脚本
[ExecuteInEditMode]
//刚需组件（Camera）
[RequireComponent(typeof(Camera))]
public class PostEffectsBase : MonoBehaviour
{

    // 在Start()中调用
    protected void CheckResources()
    {
        bool isSupported = CheckSupport();

        if (isSupported == false)
        {
            NotSupported();
        }
    }

    // 平台渲染纹理与屏幕特效支持检测
    protected bool CheckSupport()
    {
        if (SystemInfo.supportsImageEffects == false || SystemInfo.supportsRenderTextures == false)
        {
            Debug.LogWarning("This platform does not support image effects or render textures.");
            return false;
        }

        return true;
    }

    // 当不支持的时候，将脚本的enabled设置为false
    protected void NotSupported()
    {
        enabled = false;
    }

    protected void Start()
    {
        CheckResources();
    }

    // 检测Material和Shader，在派生类中调用，绑定材质和shader
    protected Material CheckShaderAndCreateMaterial(Shader shader, Material material)
    {
        if (shader == null)
        {
            return null;
        }

        if (shader.isSupported && material && material.shader == shader)
            return material;

        if (!shader.isSupported)
        {
            return null;
        }
        else
        {
            material = new Material(shader);
            material.hideFlags = HideFlags.DontSave;
            if (material)
                return material;
            else
                return null;
        }
    }
}







BrightnessSaturationAndContrast类（基于posteffectbase的定制屏幕特效类）

using UnityEngine;
using System.Collections;

public class BrightnessSaturationAndContrast : PostEffectsBase
{
    //绑定的shader
    public Shader briSatConShader;
    private Material briSatConMaterial;
    public Material material
    {
        get
        {
            //调用基类的CheckShaderAndCreateMaterial方法绑定shader与Material
            briSatConMaterial = CheckShaderAndCreateMaterial(briSatConShader, briSatConMaterial);
            return briSatConMaterial;
        }
    }
    //亮度值
    [Range(0.0f, 3.0f)]
    public float brightness = 1.0f;

    //饱和度
    [Range(0.0f, 3.0f)]
    public float saturation = 1.0f;
    //对比度
    [Range(0.0f, 3.0f)]
    public float contrast = 1.0f;
    //重写OnRenderImage方法
    void OnRenderImage(RenderTexture src, RenderTexture dest)
    {
        if (material != null)
        {
            //设置shader中的各个值
            material.SetFloat("_Brightness", brightness);
            material.SetFloat("_Saturation", saturation);
            material.SetFloat("_Contrast", contrast);
            //将源纹理通过material处理，复制到目标纹理中
            Graphics.Blit(src, dest, material);
        }
        else
        {
            Graphics.Blit(src, dest);
        }
    }
}































使用的Bright shader

Shader "Aaron/renderTex01" {
    Properties {
        //Graphics.Blit函数传入的src
        _MainTex ("Source Texture", 2D) = "white" {}
        //亮度值
        _Brightness ("Brightness", Float) = 1
       //饱和度
        _Saturation("Saturation", Float) = 1
       //对比度
        _Contrast("Contrast", Float) = 1
    }
    SubShader {
        Pass {  
            //关闭深度写入
            ZTest Always Cull Off ZWrite Off
            
            CGPROGRAM  
            #pragma vertex vert  
            #pragma fragment frag  
              
            #include "UnityCG.cginc"  
            //CG中代码块中声明对应的变量
            sampler2D _MainTex;  
            half _Brightness;
            half _Saturation;
            half _Contrast;
              
            struct v2f {
                float4 pos : SV_POSITION;
                half2 uv: TEXCOORD0;
            };
            //顶点着色器，坐标转换以及获取uv值  
            v2f vert(appdata_img v) {
                v2f o;
                
                o.pos = UnityObjectToClipPos(v.vertex);
                
                o.uv = v.texcoord;
                         
                return o;
            }
            //片元着色器
            fixed4 frag(v2f i) : SV_Target {
                //纹理采样
                fixed4 renderTex = tex2D(_MainTex, i.uv);  
                  
                // 亮度值调整
                fixed3 finalColor = renderTex.rgb * _Brightness;
                
                // 该像素对应的亮度值
                fixed luminance = 0.2125 * renderTex.r + 0.7154 * renderTex.g + 0.0721 * renderTex.b;
                //使用该亮度值创建一个饱和度为0的颜色
                fixed3 luminanceColor = fixed3(luminance, luminance, luminance);
                //将之前的颜色与该颜色进行插值运算，得到调整饱和度后的颜色
                finalColor = lerp(luminanceColor, finalColor, _Saturation);
                
                // 创建一个对比度度为0的颜色
                fixed3 avgColor = fixed3(0.5, 0.5, 0.5);
                //将之前的颜色与该颜色进行插值运算，得到调整对比度后的颜色
                finalColor = lerp(avgColor, finalColor, _Contrast);
                 //返回最终颜色   
                return fixed4(finalColor, renderTex.a);  
            }  
              
            ENDCG
        }  
    }
    
    Fallback Off
}
